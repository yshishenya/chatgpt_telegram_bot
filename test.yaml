openapi: 3.0.1
info:
  title: Professionals Project Service
  description: API for Professionals 4.0 platform project operations
  version: HEAD-779b266-2023-11-14T08:43:33Z
servers:
  - url: https://backend.professionals4-0.ru
    description: Generated server url
paths:
  /web/projects/{projectExtId}/team/{userId}/feedback:
    post:
      tags:
        - Project
      summary: Send user feedback
      operationId: createUserFeedback
      parameters:
        - name: userId
          in: path
          description: User ID
          required: true
          schema:
            type: string
            format: uuid
          example: 0121e98e-6b2c-46d1-ac94-931b8fd62c46
        - name: projectExtId
          in: path
          description: Project external ID
          required: true
          schema:
            type: string
          example: 0121e98e-6b2c-46d1-ac94-931b8fd62c46
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateUserFeedbackRequest'
        required: true
      responses:
        201:
          description: Feedback sent

  /web/projects/{extId}/feedback:
    post:
      tags:
        - Project
      summary: Create project feedback
      operationId: createProjectFeedback
      parameters:
        - name: extId
          in: path
          description: Project external ID
          required: true
          schema:
            type: string
          example: MeaningfulId
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateProjectFeedbackRequest'
        required: true
      responses:
        201:
          description: Feedback created

  /web/projects/{projectExtId}/jobs/{jobExtId}:
    get:
      tags:
        - Project
      summary: Get project job
      operationId: getProjectJob
      parameters:
        - name: projectExtId
          in: path
          description: Project external ID
          required: true
          schema:
            type: string
          example: MeaningfulId
        - name: jobExtId
          in: path
          description: Job external ID
          required: true
          schema:
            type: string
          example: MeaningfulId
      responses:
        200:
          description: Job received
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProjectJobView'

  /web/projects/{extId}:
    get:
      tags:
        - Project
      summary: Get project
      operationId: getProject
      parameters:
        - name: extId
          in: path
          required: true
          schema:
            type: string
          example: MeaningfulId
      responses:
        200:
          description: Project received
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProjectProfileView'

  /web/projects/{extId}/team:
    get:
      tags:
        - Project
      summary: Project team
      operationId: getProjectTeam
      parameters:
        - name: extId
          in: path
          required: true
          schema:
            type: string
          example: MeaningfulId
      responses:
        200:
          description: Project team received
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProjectTeamView'

  /web/projects/{extId}/jobs:
    get:
      tags:
        - Project
      summary: Get project jobs
      operationId: getProjectJobs
      parameters:
        - name: extId
          in: path
          description: Project external ID
          required: true
          schema:
            type: string
          example: MeaningfulId
      responses:
        200:
          description: Jobs received
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProjectJobsView'

  /web/projects/search:
    get:
      tags:
        - Project
      summary: Search projects
      operationId: getProjects
      responses:
        200:
          description: Projects received
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProjectsSearchResponse'

  /web/projects/count:
    get:
      tags:
        - Project
      summary: Get projects count
      operationId: getProjectsCount
      responses:
        200:
          description: Count received
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProjectsCountResponse'

components:
  schemas:

    CreateUserFeedbackRequest:
      type: object
      required:
        - rating
        - isNotInteraction
      properties:
        rating:
          type: integer
          minimum: 1
          maximum: 5
          description: Rating
          example: 3
        comment:
          type: string
          description: Comment
          example: It was great!
        recommendedSkillIds:
          type: array
          description: Recommended skills
          items:
            type: string
            format: uuid
          example:
            - 9f5108b3-fe62-4710-8c07-d11997f82bc6
            - 9176b542-117b-443f-8fc4-c59ca2770d3c
        keyQuestionReviews:
          type: array
          description: Key skill reviews
          items:
            $ref: '#/components/schemas/KeySkillQuestionReview'
        isNotInteraction:
          type: boolean
          description: If user didn't interact
          example: false

    KeySkillQuestionReview:
      type: object
      required:
        - questionId
        - answer
      properties:
        questionId:
          type: string
          format: uuid
          description: Feedback question ID
          example: 0121e98e-6b2c-46d1-ac94-931b8fd62c46
        answer:
          type: string
          description: Answer
          example: HIGH
          enum:
            - CONFIRMED
            - REJECTED

    CreateProjectFeedbackRequest:
      type: object
      required:
        - rating
        - skillIds
      properties:
        rating:
          type: integer
          minimum: 1
          maximum: 5
          description: Rating
          example: 3
        comment:
          type: string
          description: Comment
          example: It was great!
        answers:
          type: array
          items:
            $ref: '#/components/schemas/Answer'
        skillIds:
          type: array
          description: Skills
          items:
            type: string
            format: uuid
          example:
            - 9f5108b3-fe62-4710-8c07-d11997f82bc6
            - 9176b542-117b-443f-8fc4-c59ca2770d3c

    Answer:
      required:
        - questionId
        - answerId
      type: object
      properties:
        questionId:
          type: string
          format: uuid
          description: Feedback question ID
          example: 0121e98e-6b2c-46d1-ac94-931b8fd62c46
        answerId:
          type: string
          format: uuid
          description: Answer ID
          example: 0121e98e-6b2c-46d1-ac94-931b8fd62c46

    ProjectJobView:
      type: object
      required:
        - job
        - isCurrentUserInterviewer
      properties:
        isCurrentUserInterviewer:
          type: boolean
          description: If user is interviewer
          example: false
        job:
          $ref: '#/components/schemas/JobView'
        myApplication:
          $ref: '#/components/schemas/MyApplication'
        applications:
          $ref: '#/components/schemas/ApplicationsView'

    JobView:
      type: object
      required:
        - id
        - name
        - status
        - skills
        - workFormat
      properties:
        id:
          type: string
          format: uuid
          description: Job ID
          example: 0121e98e-6b2c-46d1-ac94-931b8fd62c46
        name:
          type: string
          description: Job name
          example: Render expert
        extId:
          type: string
          description: External ID
          example: MeaningfulId
        status:
          type: string
          description: Job status
          example: CLOSED
          enum:
            - AVAILABLE
            - CLOSED
            - ARCHIVED
            - RECRUITMENT_SUSPENDED
        skills:
          type: array
          description: Required skills
          items:
            $ref: '#/components/schemas/SkillView'
        reward:
          type: number
          description: Project reward
          example: 1000
        descriptions:
          type: array
          items:
            $ref: '#/components/schemas/DescriptionView'
        applicationsUpToDate:
          type: string
          format: date
          description: Application deadline
          example: '2020-09-01'
        decisionMakingUpDate:
          type: string
          format: date
          description: Decision making deadline
          example: '2020-09-01'
        plannedStartDate:
          type: string
          format: date
          description: Planned start date
          example: '2020-09-01'
        plannedEndDate:
          type: string
          format: date
          description: Planned end date
          example: '2020-09-01'
        workFormat:
          type: string
          description: Work format

    DescriptionView:
      type: object
      required:
        - title
        - value
      properties:
        title:
          type: string
          description: Description title
          example: What is the project about?
        value:
          type: string
          description: Description value
          example: It's about this and that

    SkillView:
      type: object
      required:
        - id
        - name
        - type
      properties:
        id:
          type: string
          format: uuid
          description: Skill ID
          example: 0121e98e-6b2c-46d1-ac94-931b8fd62c46
        name:
          type: string
          description: Skill name
          example: Chalk drawing
        type:
          type: string
          description: Skill type
          example: HARD_SKILLS
          enum:
            - HARD_SKILLS
            - SOFT_SKILLS
            - LEADERSHIP_SKILLS

    ApplicationsView:
      type: object
      properties:
        responses:
          type: array
          items:
            $ref: '#/components/schemas/JobApplicationView'
        interviews:
          type: array
          items:
            $ref: '#/components/schemas/JobApplicationView'
        offers:
          type: array
          items:
            $ref: '#/components/schemas/JobApplicationView'
        accepted:
          type: array
          items:
            $ref: '#/components/schemas/JobApplicationView'

    JobApplicationView:
      type: object
      required:
        - id
        - state
        - type
        - user
      properties:
        id:
          type: string
          format: uuid
          description: Application ID
          example: 0121e98e-6b2c-46d1-ac94-931b8fd62c46
        state:
          type: string
          description: Application state
          example: OFFER_ACCEPTED
          enum:
            - OFFER_REJECTED
            - OFFER_ACCEPTED
            - EXPIRED
            - OFFER
            - INTERVIEW_REJECTED_BY_TALENT
            - INTERVIEW_REJECTED_BY_CUSTOMER
            - INTERVIEW_ANOTHER_CHOSEN
            - INTERVIEW
            - RESPONSE_REJECTED
            - RESPONSE_ANOTHER_CHOSEN
            - RESPONSE
            - INVITE_REJECTED
            - INVITE_ANOTHER_CHOSEN
            - INVITE
            - INVITE_PENDING_REJECTION
            - RESPONSE_PENDING_REJECTION
            - INTERVIEW_PENDING_REJECTION
        type:
          type: string
          description: Application type
          example: INVITE
          enum:
            - INVITE
            - RESPONSE
        mattermostChannelId:
          type: string
          description: Interview chat ID
        createdAt:
          type: string
          format: date-time
          description: Creation time
          example: '2020-09-01T06:22:53.474Z'
        expirationDate:
          type: string
          format: date
          description: Invitation expiration date
          example: '2020-09-01'
        message:
          type: string
          description: Cover message
          example: I'm very good! Hire me
        rejectionComment:
          type: string
          description: Rejection reason
          example: Unfortunately you don't have enough experience
        isViewedByUser:
          type: boolean
          description: If viewed by current user
          example: false
        resumeLink:
          type: string
          description: Resume link
          example: https://api.example/url
        estimatedCostFrom:
          type: number
          description: Estimated cost from
          example: 5000.0
        estimatedCostTo:
          type: number
          description: Estimated cost to
          example: 5000.0
        estimatedCostMessage:
          type: string
          description: Estimated cost comment
          example: Much work so high price
        user:
          $ref: '#/components/schemas/UserView'

    UserView:
      type: object
      required:
        - id
        - firstName
        - lastName
        - rating
      properties:
        id:
          type: string
          format: uuid
          description: User ID
          example: 0121e98e-6b2c-46d1-ac94-931b8fd62c46
        firstName:
          type: string
          description: First name
          example: Ivan
        lastName:
          type: string
          description: Last name
          example: Ivanov
        avatarUrl:
          type: string
          description: Avatar URL
          example: https://api.professionals.io/api/media/9b898646-0be7-45f5-9d4b-d7d6ba3603a3/files/capibara.gif
        rating:
          $ref: '#/components/schemas/UserRating'
        isDeleted:
          type: boolean
          description: If user deleted
          example: false

    UserRating:
      type: object
      required:
        - rating
        - estimationCounts
      properties:
        rating:
          type: number
          minimum: 0
          maximum: 5
          description: Rating
          example: 3.32
        estimationCounts:
          type: integer
          description: Estimations count
          example: 32

    MyApplication:
      type: object
      required:
        - id
        - state
      properties:
        id:
          type: string
          format: uuid
          description: Application ID
          example: 0121e98e-6b2c-46d1-ac94-931b8fd62c46
        mattermostChannelId:
          type: string
          description: Interview chat ID
          example: ujcbsegq1pg5xr7gcaeji5xu7h
        state:
          type: string
          description: Application state
          example: OFFER_ACCEPTED
          enum:
            - OFFER_REJECTED
            - OFFER_ACCEPTED
            - EXPIRED
            - OFFER
            - INTERVIEW_REJECTED_BY_TALENT
            - INTERVIEW_REJECTED_BY_CUSTOMER
            - INTERVIEW_ANOTHER_CHOSEN
            - INTERVIEW
            - RESPONSE_REJECTED
            - RESPONSE_ANOTHER_CHOSEN
            - RESPONSE
            - INVITE_REJECTED
            - INVITE_ANOTHER_CHOSEN
            - INVITE
            - INVITE_PENDING_REJECTION
            - RESPONSE_PENDING_REJECTION
            - INTERVIEW_PENDING_REJECTION
        expirationDate:
          type: string
          format: date
          description: Invitation expiration date
          example: '2020-09-01'

    ProjectProfileView:
      type: object
      required:
        - id
        - name
        - company
        - status
      properties:
        id:
          type: string
          format: uuid
          description: Project ID
          example: 0121e98e-6b2c-46d1-ac94-931b8fd62c46
        extId:
          type: string
          description: External ID
          example: MeaningfulId
        name:
          type: string
          description: Project name
          example: Steam development
        shortDescription:
          type: string
          description: Short description
          example: There will be a store
        tags:
          type: array
          description: Tags
          items:
            $ref: '#/components/schemas/TagView'
        plannedStartDate:
          type: string
          format: date
          description: Planned start date
          example: '2020-09-01'
        plannedEndDate:
          type: string
          format: date
          description: Planned end date
          example: '2020-09-01'
        isProtected:
          type: boolean
          description: If project protected
          example: false
        isCurrentUserInterviewer:
          type: boolean
          description: If user interviewer
          example: false
        canSendFeedback:
          type: boolean
          description: If can send feedback
          example: false
        applicationsUpToDate:
          type: string
          format: date
          description: Application deadline
          example: '2020-09-01'
        decisionMakingUpDate:
          type: string
          format: date
          description: Decision making deadline
          example: '2020-09-01'
        files:
          type: array
          description: Files
          items:
            $ref: '#/components/schemas/ProjectFileView'
        descriptions:
          type: array
          description: Descriptions
          items:
            $ref: '#/components/schemas/Description'
        counters:
          $ref: '#/components/schemas/CounterView'
        rating:
          $ref: '#/components/schemas/RatingView'
        company:
          $ref: '#/components/schemas/CompanyView'
        groups:
          type: array
          description: Groups
          items:
            $ref: '#/components/schemas/GroupView'
        status:
          type: string
          description: Project status
          example: ARCHIVED
          enum:
            - RECRUITMENT
            - STAFFED
            - DEVELOPMENT
            - COMPLETED
            - ARCHIVED
        city:
          $ref: '#/components/schemas/CityView'
        budget:
          type: number
          description: Budget
          example: 5000

    TagView:
      type: object
      required:
        - id
        - name
      properties:
        id:
          type: string
          format: uuid
          description: Tag ID
          example: 0121e98e-6b2c-46d1-ac94-931b8fd62c46
        name:
          type: string
          description: Tag name
          example: Travel

    ProjectFileView:
      type: object
      required:
        - id
        - name
        - size
        - url
      properties:
        id:
          type: string
          format: uuid
          description: File ID
          example: 0121e98
